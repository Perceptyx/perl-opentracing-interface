=head1 NAME

OpenTracing::Interface - API definition for OpenTransport implementations

=head1 DESCRIPTION

=head2 Required Reading

In order to understand the Perl platform API, one must first be familiar with
L<the OpenTracing project|http://opentracing.io/>
and
L<terminology|http://opentracing.io/documentation/pages/spec>
more generally.



=head1 SYNOPSIS

=head2 Initialize the Tracer Singleton

    use OpenTracing::Implementation qw/YourTracingService/;

=head2 Access the Tracer Singleton

    use OpenTracing::GlobalTracer qw/$TRACER/;

=head2 Add a new span inside a subroutine

    sub some_work {
        my $opentracing_scope =
            $TRACER->start_active_span( 'some_operation_name' );
        
        ...
        
        $opentracing_scope->close
        
        return ...
    }

=head2 Inject a SpanContext into an outgoing request:

    my $opentracing_spancontext = $TRACER->get_active_span->get_context;
    
    use HTTP::Headers;
    my $http_headers = HTTP::Headers->new( ... );
    
    $TRACER->inject_context( $opentracing_spancontext,
        OPENTRACING_FORMAT_HTTP_HEADERS => $http_headers
    );
    
    my $request = HTTP::Request->new( GET => 'https://...', $headers);
    my response = LWP::UserAgent->request( $request );

=head2 Extract a SpanContext from an incoming request

    use YourFramework;
    
    get '/some_service' => sub {
        my $http_headers = YourFramework->request->headers;
        
        my $opentracing_context = $TRACER->extract_context(
            OPENTRACING_FORMAT_HTTP_HEADERS => $http_headers
        );
        
        ...
        
    }

=cut



=head1 INDEX

See the following specifications:

=over

=item L<OpenTracing::Interface::Reference>

References are used by C<Tracer> methods C<start_span> and C<start_active_span>
to create "casual span references"

=item L<OpenTracing::Interface::Scope>

A C<Scope> formalizes the activation and deactivation of a C<Span>, usually from
a CPU standpoint.

=item L<OpenTracing::Interface::ScopeManger>

The C<ScopeManager> interface abstracts both the activation of C<Span> instances
via C<activate_span> and access to an active C<Scope> via C<get_active_scope>.

=item L<OpenTracing::Interface::Span>

Span represents a unit of work executed on behalf of a trace.

=item L<OpenTracing::Interface::SpanContext>

SpanContext represents C<Span> state that must propagate to descendant C<Span>'s
and across process boundaries.

=item L<OpenTracing::Interface::Tracer>

Tracer is the entry point API between instrumentation code and the tracing
implementation.

=back



=head1 ABOUT

The interfaces are being defined as roles ( using L<Role::Tiny> ) and use
C<around> method modifiers, instead of C<require>, we do want to wrap the method
in type checking ( using L<Type::Tiny> and friends ).

=head1 AUTHOR

Theo van Hoesel <tvanhoesel@perceptyx.com>

=head1 COPYRIGHT AND LICENSE

'OpenTracing API for Perl' is Copyright (C) 2019 .. 2020, Perceptyx Inc

This library is free software; you can redistribute it and/or modify it under
the terms of the Artistic License 2.0.

This library is distributed in the hope that it will be useful, but it is
provided "as is" and without any express or implied warranties.

For details, see the full text of the license in the file LICENSE.

